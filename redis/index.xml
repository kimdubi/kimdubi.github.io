<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis on kimDuBiA</title>
    <link>/redis/</link>
    <description>Recent content in Redis on kimDuBiA</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 04 Sep 2022 15:21:10 +0900</lastBuildDate><atom:link href="/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElastiCache(Redis) migration tool RIOT-REDIS</title>
      <link>/redis/riot_redis/</link>
      <pubDate>Sun, 04 Sep 2022 15:21:10 +0900</pubDate>
      
      <guid>/redis/riot_redis/</guid>
      <description>ElastiCache를 사용하다보면
다른 ElastiCache와 replication 구성을 설정할 수 없어서
ElastiCache를 신규 환경으로 migration 하는 등의 작업이 필요할 때 난감해지곤 하는데요
이런 어려움을 해소하기 위한 tool이 있어 공유드리고자 합니다
(bigkeys 가 없는 환경에서만 사용하는 것이 좋을 것 같습니다)
테스트 배경  특정 계정 ex) account1에 속한 DB 리소스들을 다른 계정의 VPC로 분리할 계획임 VPC peering이 되어도 ElastiCache ↔ ElastiCache 간에는 replication 기능이 막혀있어 replication을 통한 이관이 불가능함 개발팀의 배치 개발 혹은 원본 소스의 스냅샷을 신규 VPC에서 복원하는 방법이 있으나 시간이 오래 소요되어 점검시간이 크게 길어지는 문제가 있음  RIOT-Redis란?</description>
    </item>
    
    <item>
      <title>Redis keys 대신 scan!</title>
      <link>/redis/redis_scan/</link>
      <pubDate>Thu, 14 Oct 2021 07:58:36 +0900</pubDate>
      
      <guid>/redis/redis_scan/</guid>
      <description>Redis에서 항상 신경써야 하는 부분은 Single Thread로 커맨드가 처리된다는 점입니다. 그렇기 때문에 O(n) 으로 처리되는 커맨드는 항상 주의를 해야하는데요. 대표적으로 keys * , flushall, flushdb, 같은 커맨드가 있습니다. 그 중에서 keys * 은 운영에 큰 영향을 끼치고 장애로 이어질 수 있기 때문에 대부분의 운영 Redis 환경에서는 rename-command 기능으로 막아놓기도 하는데요
얼마전에 한 개발자분으로부터 특정 Key를 조회하고 그 Key를 삭제하고 싶다는 요청을 받았습니다. 저희도 key 커맨드는 막아놨는지라 개발자분이 수행할 수 없는 이슈가 있는데 이럴 때 scan + pattern 커맨드로 우회할 수 있으며 keys 커맨드 사용의 위험도 회피할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Redis memory fragmentation 해소하기(activedefrag)</title>
      <link>/redis/redis_activedefrag/</link>
      <pubDate>Mon, 04 Oct 2021 23:38:09 +0900</pubDate>
      
      <guid>/redis/redis_activedefrag/</guid>
      <description>이슈상황  Redis를 maxmemory 까지 쓰는 상황 지속적으로 set 커맨드가 유입되고 이로 인해 key eviction이 발생하면서 memory 단편화가 심해짐 이는 곧 서버 메모리 사용량 상승을 초래하고 심하면 OOME 까지도 유발할 수 있음 Replica도 Master와 같은 데이터를 처리하기 때문에 memory fragmentation 현상도 동일하게 겪게되어 Replica도 동일하게 OOME 발생위험이 있음 아래 모니터링 지표는 NHN cloud의 EasyCache에서 제공하는 기능임  redis memory(rss) 서버 메모리 memory fragmentation key eviction set / get call activedefrag?</description>
    </item>
    
    <item>
      <title>Redis bind에 대한 오해</title>
      <link>/redis/redis_bind/</link>
      <pubDate>Mon, 04 Oct 2021 23:32:29 +0900</pubDate>
      
      <guid>/redis/redis_bind/</guid>
      <description>그동안 어째서인지 모르겠지만
redis.conf의 bind 파라미터가 Redis 서버로 접속 가능한 client ip 를 제어하는 ACL 기능이라고 생각해왔는데
그게 잘못된 것이라는 것을 이제야 알게 되어 내용을 정리합니다.
bind 파라미터란? Redis는 TCP/IP 통신을 사용하기 때문에 요청을 받아줄 IP:Port를 설정하고 그 IP:Port로 들어오는 클라이언트의 요청을 받아들이게 되는데요
bind 파라미터는 Redis가 클라이언트의 요청을 받아주기 위해 열어놓은 IP를 설정하는 파라미터입니다.
즉! Redis 서버에서 ifconfig로 확인했을 때 나오는 IP들, 아래에서는 127.0.0.1 , 172.20.0.10, 0.0.0.0 이 값들만 가질 수 있게 됩니다.</description>
    </item>
    
    <item>
      <title>Sentinel Failover 이벤트 발생 시 메일 받기</title>
      <link>/redis/sentinel-notify/</link>
      <pubDate>Mon, 04 Oct 2021 23:31:00 +0900</pubDate>
      
      <guid>/redis/sentinel-notify/</guid>
      <description>Redis 의 Auto Failover HA 솔루션으로는 Sentinel 이 있습니다.
Master가 down 됐는지 Sentinel 간 sdown,odown 같은 투표과정을 통해 과반수 이상의 Sentinel이 Master가 Down됐다고 판단하면 다른 Slave 를 Master로 승격시키게 됩니다.
Failover 가 발생했음을 알기 위해서 alertmanager 같은 오픈 소스를 사용하거나 별도로 스크립트를 설정해놔도 되겠지만
기본적인 sentinel의 기능으로 Failover 가 발생했음을 noti 할 수 있는 ‘sentinel notification-script’ 라는 기능이 있습니다.
사실 Failover만을 알람 받기 위한 기능은 아니고 Sentinel 의 여러 Warning 이벤트들을 noti 해주는 기능인데 주로 Failover를 위해 사용합니다.</description>
    </item>
    
    <item>
      <title>Redis memory 분석 툴 RMA</title>
      <link>/redis/redis_rma/</link>
      <pubDate>Mon, 04 Oct 2021 23:24:02 +0900</pubDate>
      
      <guid>/redis/redis_rma/</guid>
      <description>Redis Memory 분석 툴은
대상 Redis 서버에 각 data type 별 key 개수는 어떻게 되는지, 메모리 사용량은 어떻게 되는지 등을 파악하기 위해 사용되며
분석 방법에 따라 크게 두가지로 나뉘고 대표적인 제품은 아래와 같습니다.
 Live data Scan : RMA (Redis Memory Analyzer), Redis sampler rdb file : RDB tools  이 중에서 온라인 중에 scan 을 통해 안전하게 분석이 가능하고 detail한 정보를 보여주는 RMA 라는 tool 에 대해 알아보겠습니다.</description>
    </item>
    
    <item>
      <title>Redis data type 변경으로 Memory 아껴 써보자</title>
      <link>/redis/redis_str_to_hash/</link>
      <pubDate>Mon, 04 Oct 2021 23:20:16 +0900</pubDate>
      
      <guid>/redis/redis_str_to_hash/</guid>
      <description>Redis 에 값을 저장할 때 key 하나 하나에 들어가는 overhead는 50 bytes 정도 (Redis 3.2 기준) 로 생각보다 큽니다.
만약 관리의 편리성 때문에 String type 을 많이 쓰는 서비스가 있다면 다른 자료구조를 사용할 때 보다 많은 Key를 사용하게 될 것인데
이때 String 을 Hash 로 바꾸면 데이터는 온전히 보전하면서 Key 자체 개수를 줄여 메모리를 좀 더 효율적으로 쓸 수 있지 않을까? 하는 생각에 테스트를 해보게 되었습니다.
data Type 별 Key Memory usage 아래는 Redis 5.</description>
    </item>
    
    <item>
      <title>Redis client_output_buffer_limit</title>
      <link>/redis/client_output_buffer/</link>
      <pubDate>Mon, 04 Oct 2021 23:14:45 +0900</pubDate>
      
      <guid>/redis/client_output_buffer/</guid>
      <description>Master - Slave 구성으로 운영중인 서비스가 있습니다.
maxmemory, key ttl, hash key 하나에 너무 많은 value 넣지 않기 등
운영 표준을 잘 지켜가며 안정적으로 운영중인 서비스인데 어느 순간부터인지 이런 로그들이 떨어지면서 Master - Slave 연결이 자꾸 끊어지는 현상이 발생했습니다.
replconf scheduled to be closed ASAP for overcoming of output buffer limits. Connection with replica 10.111.111.111:6379 lost. psync scheduled to be closed ASAP for overcoming of output buffer limits.  output buffer limits 라는 부분이 눈에 띄는데 redis에는 client-output-buffer-limit 라는 설정이 있습니다.</description>
    </item>
    
    <item>
      <title>Redis unlink와 del 차이점</title>
      <link>/redis/unlink/</link>
      <pubDate>Mon, 04 Oct 2021 22:58:52 +0900</pubDate>
      
      <guid>/redis/unlink/</guid>
      <description>Redis 4.0부터 unlink라는 Key 삭제 커맨드가 추가되었습니다.
기존에도 del 이라는 Key 삭제 커맨드가 있는데 차이점은 무엇일까요?
바로 unlink는 async 방식으로 background에서 별도의 Thread에 의해 처리된다는 점입니다.
(del 은 sync 방식으로 main thread에서 처리됨)
따라서 del 로 처리할 때 보다 훨씬 더 빨리 서비스에 영향 없이 처리할 수 있는데요
이번 글에서는 unlink 커맨드에 대해 알아보겠습니다.
redis의 unlink 관련 설정 * lazyfree-lazy-eviction yes =&amp;gt;maxmemory 까지 사용중일 때 maxmemory-policy 에 따라 key를 삭제하는 경우 del 대신 unlink 사용 * lazyfree-lazy-expire yes =&amp;gt; EXPIRE 커맨드로 TTL이 설정된 key를 삭제할 때 del 대신 unlink 사용 * lazyfree-lazy-server-del yes =&amp;gt; 기존에 있는 key를 set이나 rename 으로 엎어칠때 기존 값을 del 대신 unlink로 삭제함 * replica-lazy-flush yes =&amp;gt; replicaof 설정으로 master의 데이터를 처음 복제해올때 기존에 있던 값들을 del 대신 unlink로 삭제함  redis thread 확인 [root@e7900ebd4833 /]# ps -eLf | grep redis root 19 1 19 0 4 04:59 ?</description>
    </item>
    
    <item>
      <title>Redis 응답은 느리지만 Slowlog 안남을 때</title>
      <link>/redis/slowlog/</link>
      <pubDate>Mon, 04 Oct 2021 22:53:25 +0900</pubDate>
      
      <guid>/redis/slowlog/</guid>
      <description>Redis 운영 중 Client 쪽에서 응답을 늦게 받았다고 확인 요청이 와서
Redis의 slowlog 를 확인해봤더니 아무 slowlog가 없는 케이스가 발생했습니다.
slowlog 확인 127.0.0.1:6001&amp;gt; config get slowlog-log-slower-than 1) &amp;quot;slowlog-log-slower-than&amp;quot; 2) &amp;quot;10000&amp;quot; ### 10000 microsecond 127.0.0.1:6001&amp;gt; slowlog get 10 (empty list or set)  slowlog는 언제 찍힐까? client가 느끼는 slowlog, 즉 latency 와 redis의 slowlog 기준은 조금 다릅니다.
=&amp;gt; client latency : client가 redis 에 request 를 보내고 결과를 받을 때 까지의 시간</description>
    </item>
    
    <item>
      <title>Redis Data Structure</title>
      <link>/redis/redis_datastructure/</link>
      <pubDate>Mon, 04 Oct 2021 22:34:05 +0900</pubDate>
      
      <guid>/redis/redis_datastructure/</guid>
      <description>지난 글에서 Redis와 Memcached 의 가장 큰 차이점으로 데이터를 저장할 수 있다는 점을 들며
RDB, AOF에 대한 내용을 다뤘었는데요
이번 글에서는 또 다른 차이점인 Redis의 다양한 자료구조에 대해 다뤄보겠습니다.
Redis Data Structures 초기에는 String, Bitmap, Hash, List, Set, Sorted Set 정도의 데이터 타입만 제공하다가
버전이 올라가면서 현재는 Geospatial Index, Hyperloglog, Stream 까지 지원하고 있습니다.
이렇게 다양한 자료구조를 key-value 형태로 지원하는 점 뿐만 아니라
각 자료구조를 효율적으로 사용할 수 있도록 도와주는 커맨드를 지원하는 덕분에 개발의 편의성과 효율성을 높일 수 있는 것이 큰 장점입니다.</description>
    </item>
    
    <item>
      <title>Redis AOF와 RDB에 대해</title>
      <link>/redis/redis_persistence/</link>
      <pubDate>Mon, 04 Oct 2021 22:27:34 +0900</pubDate>
      
      <guid>/redis/redis_persistence/</guid>
      <description>Redis 와 Memcached 를 가장 크게 구분짓는 특징은 무엇일까요?
간단하게는 아래와 같은 특징들이 있는데
 Key-Value 만 지원하는 Memcached 에 비해 Key-value , list , hash , set , sorted set 다양한 자료구조를 지원 Redis의 데이터를 디스크로 저장하는 Persistent 기능  이번 글에서는 그 중에서도 data 영속성에 대해 다뤄보겠습니다.
RDB Redis 인스턴스의 현재 메모리에 대한 dump (스냅샷) 를 생성하는 기능
RDB 설정 save &amp;quot;&amp;quot; #save 900 1 #save 300 10 #save 60 10000 rdbchecksum yes stop-writes-on-bgsave-error no rdbcompression yes dbfilename redis_6001.</description>
    </item>
    
  </channel>
</rss>

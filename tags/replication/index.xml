<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>replication on kimDuBiA</title>
    <link>/tags/replication/</link>
    <description>Recent content in replication on kimDuBiA</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 Oct 2021 21:23:09 +0900</lastBuildDate><atom:link href="/tags/replication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker-compose로 Mysql Replication 자동 구성하기</title>
      <link>/cloud/docker_mysql_repl/</link>
      <pubDate>Wed, 06 Oct 2021 21:23:09 +0900</pubDate>
      
      <guid>/cloud/docker_mysql_repl/</guid>
      <description>docker-compose 는 docker container를 생성하기 위한 명령어들을 미리 적어놓은 문서라고 할 수 있습니다.
이번 글에서는 docker-compose 를 활용하여 mysql master - slave replication 구성된 container들을 올리는 방법을 공유하겠습니다.
본문에서 사용하는 mysql image 는 개인적으로 생성하여 사용하는 이미지이기 때문에 다른 이미지를 사용하는 경우엔 그에 맞게 설정 확인이 필요합니다.
구성  docker-compose  mysql_master  Dockerfile  docker-entrypoint.sh     mysql_slave  Dockerfile  docker-entrypoint.sh        docker-compose.</description>
    </item>
    
    <item>
      <title>PostgreSQL wal_level=replica / logical 차이</title>
      <link>/postgresql/pg_wal_level/</link>
      <pubDate>Wed, 06 Oct 2021 00:27:21 +0900</pubDate>
      
      <guid>/postgresql/pg_wal_level/</guid>
      <description>PostgreSQL 설정 중 wal_level 이라는 설정이 있습니다.
WAL 에 저장되는 데이터의 양이나 수준을 지정하는 설정으로
streaming replication 을 위해서는 최소 wal_level = replica
logical replication을 위해서는 최소 wal_level = logical 설정이 필요한데
정확히 이 두 설정값에 따라 데이터가 어떻게 저장되는지에 대한 설명이 부족해서 찾아본 내용을 공유합니다.
logical replicaion 원리  WAL record가 생성되면 logical decoding 을 거쳐 변경된 데이터를 RecorderBufferChange (HeapTupleData)로 재구성합니다. pgoutput plugin이 이 tuple을 subscriber, 즉 슬레이브에게 보냅니다 HeapTupleData를 받은 slave는 변경 전 데이터 (tuple-old)를 찾아 tuple-new 로 바꿔주는 DML 구문을 재 수행합니다.</description>
    </item>
    
    <item>
      <title>PostgreSQL synchronus_commit</title>
      <link>/postgresql/pg_sync_commit/</link>
      <pubDate>Tue, 05 Oct 2021 23:57:38 +0900</pubDate>
      
      <guid>/postgresql/pg_sync_commit/</guid>
      <description>replication 구성에서 중요하게 생각할 부분 중 하나로 sync 방식이 있습니다.
MySQL의 경우 sync,async,semi sync 방식으로 설정할 수 있는데요.
이번 글에서는 PostgreSQL의 sync replication 설정과 주의사항에 대해서 알아보겠습니다.
WAL 전달에 따른 ACK  백엔드 프로세스는 XLogInsert () 및 XLogFlush () 함수를 실행하여 WAL 세그먼트 파일에 WAL 데이터를 쓰고 플러시 합니다. Primary의 walsender 프로세스는 WAL 세그먼트에 기록 된 WAL 데이터를 Standby의 walreceiver 프로세스로 보냅니다. WAL 데이터를 보낸 후 백엔드 프로세스는 Standby의 ACK 응답을 계속 대기합니다.</description>
    </item>
    
    <item>
      <title>PostgreSQL replication을 위한 WAL 전달과정</title>
      <link>/postgresql/pg_replication_wal/</link>
      <pubDate>Tue, 05 Oct 2021 23:42:16 +0900</pubDate>
      
      <guid>/postgresql/pg_replication_wal/</guid>
      <description>PostgreSQL replication을 위한 WAL 전달과정 ORACLE의 RAC 처럼 공유디스크를 사용하지 않는 이상 DBMS는 Master - Slave 구성을 위해 어떤 방식으로든 Master에서 수행한 트랜잭션을 Slave로 전파해야 합니다.
MySQL은 SQL 커맨드를 전파하는 방식으로 하는 반면, PostgreSQL은 트랜잭션 로그를 전달하는 방식으로 replication을 수행합니다.
이 두개의 방식은 비슷한듯, 아래와 같이 다르게 조금은 동작합니다.
 MySQL   PostgreSQL  왜 이런 차이가 발생하는 건지 이번 글에서는 PostgreSQL의 Streaming Replication 기준으로 복제 방식을 살펴보겠습니다.
MySQL의 replication 방식은 아래 글을 참고해주세요</description>
    </item>
    
    <item>
      <title>pg_replication_slot 사용 시 wal logfile이 계속 쌓일때</title>
      <link>/postgresql/pg_slot_issue/</link>
      <pubDate>Tue, 05 Oct 2021 23:31:29 +0900</pubDate>
      
      <guid>/postgresql/pg_slot_issue/</guid>
      <description>PostgreSQL 의 복제구성으로 가장 널리 쓰이는 방법은
streaming replication + physical replication slot 입니다.
특히 physical replication slot 을 사용하는 경우에는 DB에서 slave 가 필요로 하는 WAL logfile 정보를 관리하기 때문에
운영자가 wal_keep_segments , max_wal_size 같은 WAL 보관 설정에 대해 고민할 필요가 없습니다.
그러나 이 편리한 replication slot 기능에도 예외상황이 있는데요
slave DB가 계속 replication 을 받지 못하는 상황이거나,
사용하지 않는 replication slot이 방치 된 경우
DB는 WAL logfile들이 나중엔 반영될 거라고 보기 때문에 계속~ 무한정 ~ file들을 저장하게 됩니다.</description>
    </item>
    
    <item>
      <title>PostgreSQL Replication 설정-Streaming Replication</title>
      <link>/postgresql/postgresql_replication/</link>
      <pubDate>Tue, 05 Oct 2021 22:30:22 +0900</pubDate>
      
      <guid>/postgresql/postgresql_replication/</guid>
      <description>REPLICATION 방식 log shipping  file-based 복제로 master의 WAL file이 생성되면 이 파일을 scp를 통해 standby서버로 전달하여 반영함 wal file이 생길 때 까지 replication gap 이 발생할 수 있음  logical replication  pub / sub 구조로 양방향 replication 가능 특정 테이블만 복제하는 partial replication 가능 DDL 복제는 안되기 때문에 각각 수행해줘야함  streaming replication  Master는 standyby 에게 transaction log entires 를 전달하고 standby 는 WAL file을 기다리지 않고 record 단위로 복제 수행 일반적으로 가장 많이 사용되는 복제 방식  streaming replication 설정 1.</description>
    </item>
    
    <item>
      <title>MySQL replication filter 사용 시 주의사항</title>
      <link>/mysql/replication_filter_issue/</link>
      <pubDate>Mon, 04 Oct 2021 21:49:23 +0900</pubDate>
      
      <guid>/mysql/replication_filter_issue/</guid>
      <description>MySQL replication_do_db 사용시 주의사항 하나의 DB서버에 여러 논리DB들이 있고 그 중 특정 논리DB를 다른 DB서버로 분리하는 작업을 종종 합니다.
이때 무중단으로 분리하기 위해서 replication filter 기능을 사용하는데요
이 때의 주의사항을 알아보도록 하겠습니다.
Replication filter 개요  리플리케이션 필터는 MySQL 복제 구성 시에 DB인스턴스 전체를 복제하는 것이 아닌 특정 논리DB만 복제해야할 때 사용할 수 있는 기능 옵션의 종류는 아래와 같이 존재  REPLICATE_DO_DB – 특정디비만 REPLICATE_IGNORE_DB – 특정디비제외 REPLICATE_DO_TABLE – 특정테이블만 REPLICATE_IGNORE_TABLE – 특정테이블 제외 REPLICATE_WILD_DO_TABLE – 특정패턴테이블만 REPLICATE_WILD_IGNORE_TABLE – 특정패턴테이블 제외 REPLICATE_REWRITE_DB – DB명 바꿔서   CHANGE REPLICATION FILTER 구문 사용시 동일종류 필터는 마지막 수행된 쿼리만 사용됨 ex)  change replication filter replicate_do_db=(kimdubi_db),replicate_do_db=(kimdubi_db2,kimdubi_db3); =&amp;gt; kimdubi_db2, kimdubi_db3 만 replication 하도록 반영됨</description>
    </item>
    
    <item>
      <title>MySQL 5.7.15 Master-Slave datetime 이슈</title>
      <link>/mysql/mysql_5715_datetime_issue/</link>
      <pubDate>Mon, 04 Oct 2021 21:15:20 +0900</pubDate>
      
      <guid>/mysql/mysql_5715_datetime_issue/</guid>
      <description>MySQL 5.7.15 Master-Slave datetime 이슈 얼마전 운영하는 MySQL에서 재미있는 이슈가 하나 터졌습니다.
datetime 컬럼에 대해 Master / Slave 간 1초 씩 차이나서 데이터가 안맞는 이슈였는데요
간단히 정리하면 이런 버그였습니다.
datetime 칼럼 insert문이 binary log에 millisecond 값이 생략되어 마스터-슬레이브 값 차이가 1초씩 발생 (server-side prepared statements 사용시, timestamp의 millisecond 부분이 master에서는 정상적으로 반올림 되는데 slave에서는 잘리는 버그) 버그 리포트 : https://bugs.mysql.com/bug.php?id=74550 5.7.18 버전에서 패치  이슈 위에서 보이듯이 Master / Slave 간 datetime 값이 1초씩 차이가 납니다.</description>
    </item>
    
    <item>
      <title>MySQL8 replication REQUIRE_TABLE_PRIMARY_KEY_CHECK</title>
      <link>/mysql/replication_force_pk/</link>
      <pubDate>Mon, 04 Oct 2021 17:28:58 +0900</pubDate>
      
      <guid>/mysql/replication_force_pk/</guid>
      <description>MySQL8.0 Replication REQUIRE_TABLE_PRIMARY_KEY_CHECK MySQL 8.0 부터 replication 관련 재밌는 기능들이 많이 생겼는데
그 중 하나가 오늘 소개해드릴 REQUIRE_TABLE_PRIMARY_KEY_CHECK 기능입니다.
replication 구성 환경에서 Table 생성 시 Primary key를 항상 강제시킬 수 있는 기능인데요
이전부터 CUBRID 라는 DB에서는 PK가 없는 테이블은 replication이 안되는데
CUBRID가 떠오르는 기능이네요
REQUIRE_TABLE_PRIMARY_KEY_CHECK 란?  performance_schema.replication_applier_configuration (8.0.20 이상 지원)  mysql&amp;gt; desc performance_schema.replication_applier_configuration; +---------------------------------+---------------------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +---------------------------------+---------------------------+------+-----+---------+-------+ | CHANNEL_NAME | char(64) | NO | PRI | NULL | | | DESIRED_DELAY | int | NO | | NULL | | | PRIVILEGE_CHECKS_USER | text | YES | | NULL | | | REQUIRE_ROW_FORMAT | enum(&#39;YES&#39;,&#39;NO&#39;) | NO | | NULL | | | REQUIRE_TABLE_PRIMARY_KEY_CHECK | enum(&#39;STREAM&#39;,&#39;ON&#39;,&#39;OFF&#39;) | NO | | NULL | | +---------------------------------+---------------------------+------+-----+---------+-------+ =&amp;gt; replication 구성에서 Slave가 Master의 트랜잭션을 반영할 때</description>
    </item>
    
    <item>
      <title>MySQL Crash-safe replication</title>
      <link>/mysql/crash_safe/</link>
      <pubDate>Mon, 04 Oct 2021 16:53:48 +0900</pubDate>
      
      <guid>/mysql/crash_safe/</guid>
      <description>MySQL crash-safe replication MySQL crash-safe replication 기능은 5.6 버전부터 생긴 오래된 개념입니다.
slave DB가 crash 되어 재기동 되는 경우에도 data 중복이나 유실 같은
replication이 깨지는 경우를 막기 위한 기능인데요
이번 글에서는 MySQL crash-safe replication 에 대해서 살펴보겠습니다.
crash-safe replication 개념 replication 수행 중 Slave의 status를 file에 update 하기 전에 Slave DB가 crash 후 재기동 되는 경우 마지막 트랜잭션을 재수행 하기 때문에 중복 에러등으로 replication이 깨질 수 있습니다.
이를 보완하기 위해 나온 설정이 relay_log_info_repository=TABLE 이며</description>
    </item>
    
    <item>
      <title>MySQL8 Multi Source Replication 개선점</title>
      <link>/mysql/mysql8_multi_source_replication/</link>
      <pubDate>Mon, 04 Oct 2021 15:17:13 +0900</pubDate>
      
      <guid>/mysql/mysql8_multi_source_replication/</guid>
      <description>MySQL8 Multi Source Replication 개선점 5.7과 8.0 multi-source replication 차이점 mysql 5.7 버전부터 multi-source replication 기능이 생기면서 유용하게 사용되고 있지만
두대 이상의 Master 에서 같은 이름의 database를 구분 지어 다른 db명으로 변경해서
replication 해오는 기능은 지원되지 않았습니다.
replication filter 가 channel 별로 적용 되는 게 아닌 , global 로 적용되어
replication_rewrite_db filter를 마음대로 사용할 수 없었기 때문인데
mysql 8 버전대에서 이 부분이 아래와 같이 가능해졌습니다.
MySQL 5.7 Master 1: kimdubi_db =&amp;gt; Slave : kimdubi_db Master 2: kimdubi_db =&amp;gt; Slave : kimdubi_db  =&amp;gt; replication_rewrite_db filter 가 global 로 적용되기 때문에 위와 같이 master host 가 달라도 data 충돌의 위험이 있음</description>
    </item>
    
    <item>
      <title>MySQL Multi Source Replication</title>
      <link>/mysql/multi_source_replication/</link>
      <pubDate>Mon, 04 Oct 2021 15:00:07 +0900</pubDate>
      
      <guid>/mysql/multi_source_replication/</guid>
      <description>MySQL Multi Source Replication Multi Source Replication ? 하나의 slave db서버가 여러개의 master와 연결하여 replication 을 구성하는 기능으로 mysql 5.7.x 버전대 부터 사용가능함
백업 용도, 로그 통합 DB, 배치작업 등을 위해 데이터를 한곳에 모을 필요가 있을 때 매우 유용한 기능
 multi master 와 multi source 는 다른 개념   slave는 여러 개의 master 를 channel name 으로 구분함  구성방법  replication repository 설정  mysql&amp;gt; show variables like &#39;%repository%&#39;; +---------------------------+-------+ | Variable_name | Value | +---------------------------+-------+ | master_info_repository | TABLE | | relay_log_info_repository | TABLE | +---------------------------+-------+ 2 rows in set (0.</description>
    </item>
    
    <item>
      <title>MySQL lossless semi-sync replication</title>
      <link>/mysql/semi_sync/</link>
      <pubDate>Mon, 04 Oct 2021 03:39:53 +0900</pubDate>
      
      <guid>/mysql/semi_sync/</guid>
      <description>MySQL lossless semi-sync replication MySQL은 ORACLE 과는 HighAvailibility를 충족시키는 방법이 다릅니다.
하나의 스토리지에 데이터를 이중화,삼중화해서 저장하고 이를 여러 인스턴스가 공유하는 ORACLE의 RAC와는 달리
MySQL은 Master-Slave의 개념으로 Master의 데이터를 Slave 서버로 복제하고 MHA나 MMM 같은 솔루션을 통해 Master가 down 되었을 때 실시간으로 복제해둔 Slave를 Master로 승격시키는 방식입니다.
이 방식에는 한가지 문제점이 있는데요.
바로 Slave가 Master의 데이터를 모두 복제하지 못한채로 Master로 승격이 되는 경우입니다.
이 문제점을 해결하기 위해서는 단순하게는 Sync 방식으로 복제를 해오면 되겠지만 Slave에도 반영이 되어야 Master의 트랜잭션도 처리가 된다는 점에서 성능 이슈가 발생할 수 있습니다.</description>
    </item>
    
    <item>
      <title>MySQL GTID</title>
      <link>/mysql/mysql_gtid/</link>
      <pubDate>Mon, 04 Oct 2021 03:24:01 +0900</pubDate>
      
      <guid>/mysql/mysql_gtid/</guid>
      <description>MySQL_GTID 란? gtid 란?  Global Transaction IDentifiers GTID = source_id:transaction_Id  source_id = server_uuid    [root@c2b2e13b86b9 data]# cat auto.cnf [auto] server-uuid=ba315763-e7e8-11e9-9c29-0242ac110002  해당 호스트에서 수행한 트랜잭션에 global 한 id 를 commit 순서에 따라 순차적으로 부여함  ba315763-e7e8-11e9-9c29-0242ac110002:4638 =&amp;gt; ba315763-e7e8-11e9-9c29-0242ac110002 server 에서 수행된 4638번 째 트랜잭션을 의미
 GTID는 master &amp;lt;-&amp;gt; slave 간 복제 시작, 중지의 기준이 되었던 binlog file-offset pairs을 대신함
=&amp;gt; CHANGE MASTER TO 구문의 MASTER_LOG_FILE, MASTER_LOG_POS 필요없음</description>
    </item>
    
  </channel>
</rss>

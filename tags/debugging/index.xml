<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>debugging on kimDuBiA</title>
    <link>/tags/debugging/</link>
    <description>Recent content in debugging on kimDuBiA</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Aug 2024 19:45:20 +0900</lastBuildDate><atom:link href="/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL innodb_flush_log_at_trx_commit debugging</title>
      <link>/mysql/innodb_flush_log_at_trx_commit/</link>
      <pubDate>Tue, 20 Aug 2024 19:45:20 +0900</pubDate>
      
      <guid>/mysql/innodb_flush_log_at_trx_commit/</guid>
      <description>테스트 배경 특정 시간 내에 대량 데이터 적재를 완료해야하는 개발팀,, 그러나 데이터가 너무 많아 시간이 빠듯하였고, 이에 kafka의 파티션을 늘려 parallel 하게 데이터 적재를 함으로써 시간 내에 완료되도록 하였으나 그 영향으로 병렬 쓰레드가 많아지자 DB의 cpu 사용률이 높아지고 DB 스펙업을 요청하게 되었다
요청을 받은 DBA는 비용절감 추세에 따라 가능하면 스펙업 보단 쓰기의 부하를 줄이는 방식을 가이드하였고 로직 개선 등 근본적인 해결방법 외에 우선 DB쪽에서 간단히 파라미터 수정으로 쓰기 부하를 줄이는 방법을 적용하게 되었다.</description>
    </item>
    
    <item>
      <title>MySQL Out of sort memory 에러 발생 원인 디버깅</title>
      <link>/mysql/sort_buffer/</link>
      <pubDate>Tue, 13 Aug 2024 23:35:41 +0900</pubDate>
      
      <guid>/mysql/sort_buffer/</guid>
      <description>테스트 배경  aurora mysql3 (mysql8) 버전업 이후 aurora mysql2 (mysql5.7) 에서는 수행되던 쿼리가 out of sort memory, consider increasing server sort buffer size 에러로 실패하는 케이스 발생  MySQL에서 sorting 동작 방식은 buffer에 데이터를 올리고, buffer가 꽉차면 tempfile로 떨구고 다시 merge하는 sort &amp;amp; merge 방식이기 때문에 아무리 데이터가 많아도 성능에서 이슈가 있을 뿐, out of sort memory로 쿼리 자체가 실패해버리는 것은 이해가 어려운 동작이었음 aurora mysql3 (mysql8) 버전에서 어떤 변화가 생겼는지, 어떻게 우회할 수 있을지를 확인해본다   테스트 결론 aurora mysql3 업그레이드 이후, 혹은 새로 개발한 쿼리에서 아래와 같은 에러가 발생한다면,,,</description>
    </item>
    
    <item>
      <title>MySQL row_format dynamic,compact에 대해서</title>
      <link>/mysql/row_format/</link>
      <pubDate>Mon, 29 Jul 2024 16:53:15 +0900</pubDate>
      
      <guid>/mysql/row_format/</guid>
      <description>테스트 배경 특정 RDS에서 아래 쿼리가 생각보다 너무 느려서 살펴보던 중 row_format = COMPACT(MySQL 5.6 default) 인 것을 확인하였습니다 (MySQL 5.7 default DYNAMIC)
row_format은 데이터를 저장할 때 페이지를 어떻게 사용하느냐, 물리적으로 어떻게 저장할 것이냐 에 대한 설정이기 때문에 성능에 큰 영향을 줄 수 있는 파라미터로,
이 RDS는 row_format = COMPACT를 사용하고 있기 때문에 쿼리가 불필요하게 느린 것이라고 판단하여 (아래 그림 참고) 그렇다면 각각 row_format이 COMPACT / DYNAMIC일 때 실제로 어떻게 저장되고 어떻게 차이가 나는지 확인해보기로 했습니다.</description>
    </item>
    
    <item>
      <title>MySQL 대용량 테이블 DDL할 때 주의할 사항들</title>
      <link>/mysql/ddl_failcase/</link>
      <pubDate>Sun, 28 Jul 2024 14:28:05 +0900</pubDate>
      
      <guid>/mysql/ddl_failcase/</guid>
      <description>배경 pt-osc를 사용하지 않은 대용량 테이블 DDL 작업 시 실패할 수 있는 시나리오를 정리하고 각 케이스 별 준비사항과 모니터링 방법을 확인한다
실패하는 케이스는 아니어도, 무심코 놓치면 위험한 케이스도 정리하였다
요약    300GB가 넘는 테이블 작업은 피할 수 있다면 피하자
 컬럼 추가 같이 rebuild 가 필요한 작업은 child 테이블 생성 후 join 해서 쓰는 모델링 관점으로 풀도록 개발팀에 안내한다    pt-osc를 사용하는 경우 DB부하는 훨씬 줄어들지만 시간 예측이 더 어려울 수 있으니 꼼꼼히 확인해보자</description>
    </item>
    
    <item>
      <title>MySQL INSTANT DDL algorithm에 대해-2</title>
      <link>/mysql/instant_ddl2/</link>
      <pubDate>Sun, 28 Jul 2024 14:28:00 +0900</pubDate>
      
      <guid>/mysql/instant_ddl2/</guid>
      <description>테스트 배경 지난 글 (mysql instant , inplace DDL 디버깅) 에서 MySQL 8 버전에서는 inplace / instant add column 이 어떤식으로 수행되는지를 확인하고 비교해보았습니다
(add column 기준) inplace는 테이블을 다시 쓰고, instant ddl은 metadata, 정확히는 Data Dictinary 부분을 수정하기 때문에 inplace와 달리 DDL이 거의 즉시 완료됩니다.
그런데 만약 add column col1 varchar(10) default &amp;lsquo;hi&amp;rsquo; 같은 컬럼 추가 DDL을 instant 방식으로 처리한다면 데이터를 어떻게 읽어오는걸까요 ?
DB에서 데이터를 읽을 땐 디스크에 저장된 page를 메모리에 올리고 page 내 필요한 record를 찾아가서 데이터를 읽게 되는데</description>
    </item>
    
    <item>
      <title>MySQL INSTANT DDL algorithm에 대해-1</title>
      <link>/mysql/instant_ddl1/</link>
      <pubDate>Sun, 28 Jul 2024 14:27:57 +0900</pubDate>
      
      <guid>/mysql/instant_ddl1/</guid>
      <description>테스트배경 aurora3 (mysql8) 부터는 드디어 컬럼추가할 때, 컬럼 드랍할 때 수행 즉시 완료된다 ! (다른 DDL, index 추가 등은 아직 아닙니다..!)
기존에는 aurora (mysql 5.7) 에서는 inplace 방식으로 진행되기 때문에 테이블 사이즈에 따라 한참 걸려서 큰 테이블에 대한 컬럼 추가 작업은 어려움이 있었는데 이젠 instant로 바로 반영된다.
기존 inplace 방식을 간단히 살펴보고, instant 는 어떻게 수행되도록 변경되었는지를 확인해본다
algorithm=inplace  컬럼 추가 기준으로 봤을 때 (인덱스 추가는 조금 다름)</description>
    </item>
    
    <item>
      <title>MySQL 내가 만든 view가 느리다면..</title>
      <link>/mysql/view/</link>
      <pubDate>Sun, 28 Jul 2024 14:27:43 +0900</pubDate>
      
      <guid>/mysql/view/</guid>
      <description>테스트배경 개발자분 요청으로 view 를 생성하였는데 view 를 실행할 때와 native sql query를 각각 날렸을 때 성능이 확연히 차이가 난다는 개발자분의 제보,,,,
확인해보니 view를 수행할때와 view를 구성하는 sql query를 직접 수행할 떄와 플랜이 달랐다
native sql query과는 달리 view를 수행할 때는 derived table로 풀리고 있다
view로 생성할 땐 왜 이런 이상한 현상이 발생하는지 디버깅을 해보기로함
### view가 아닌 native query로 돌렸을 때의 plan +----+--------------------+--------------------------+------------+------+---------------+------+---------+------+-------+----------+----------------------------------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+--------------------+--------------------------+------------+------+---------------+------+---------+------+-------+----------+----------------------------------------------------+ | 1 | PRIMARY | a | NULL | ALL | NULL | NULL | NULL | NULL | 9086 | 100.</description>
    </item>
    
    <item>
      <title>MySQL innodb_sort_buffer_size 에 대해서</title>
      <link>/mysql/innodb_sort_buffer_size/</link>
      <pubDate>Thu, 14 Oct 2021 07:58:49 +0900</pubDate>
      
      <guid>/mysql/innodb_sort_buffer_size/</guid>
      <description>테스트 목적 innodb_sort_buffer_size 를 크게 잡으면 index 생성 속도에 얼마나 도움이 될까?
online DDL 중 DML 성능 향상에도 도움이 될까?
테스트 환경  5.7.mysql_aurora.2.04.9 r5.2xlarge writer 1대 테스트 대상 테이블 정보   CREATE TABLE `stock1` ( `s_i_id` int(11) NOT NULL, `s_w_id` smallint(6) NOT NULL, `s_quantity` smallint(6) DEFAULT NULL, `s_dist_01` char(24) DEFAULT NULL, `s_dist_02` char(24) DEFAULT NULL, `s_dist_03` char(24) DEFAULT NULL, `s_dist_04` char(24) DEFAULT NULL, `s_dist_05` char(24) DEFAULT NULL, `s_dist_06` char(24) DEFAULT NULL, `s_dist_07` char(24) DEFAULT NULL, `s_dist_08` char(24) DEFAULT NULL, `s_dist_09` char(24) DEFAULT NULL, `s_dist_10` char(24) DEFAULT NULL, `s_ytd` decimal(8,0) DEFAULT NULL, `s_order_cnt` smallint(6) DEFAULT NULL, `s_remote_cnt` smallint(6) DEFAULT NULL, `s_data` varchar(50) DEFAULT NULL, PRIMARY KEY (`s_w_id`,`s_i_id`), KEY `fkey_stock_21` (`s_i_id`), CONSTRAINT `fkey_stock_1_1` FOREIGN KEY (`s_w_id`) REFERENCES `warehouse1` (`w_id`), CONSTRAINT `fkey_stock_2_1` FOREIGN KEY (`s_i_id`) REFERENCES `item1` (`i_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 +-------------+------------+---------------+----------------+ | table_name | table_rows | DATA_SIZE(MB) | INDEX_SIZE(MB) | +-------------+------------+---------------+----------------+ | stock1 | 192659975 | 70237.</description>
    </item>
    
  </channel>
</rss>
